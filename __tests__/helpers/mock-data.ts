/**
 * Mock Data Generators
 * Reusable mock data for testing
 */

export const MockUsers = {
  regular: {
    id: 'user-regular-1',
    email: 'regular@test.com',
    displayName: 'Regular User',
    balance: 1000,
    role: 'USER',
    trustScore: 100,
    totalBets: 5,
    totalWinnings: 250,
    winRate: 0.6,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-15T00:00:00Z',
  },
  admin: {
    id: 'user-admin-1',
    email: 'admin@test.com',
    displayName: 'Admin User',
    balance: 5000,
    role: 'ADMIN',
    trustScore: 100,
    totalBets: 0,
    totalWinnings: 0,
    winRate: 0,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-15T00:00:00Z',
  },
  lowBalance: {
    id: 'user-lowbalance-1',
    email: 'lowbalance@test.com',
    displayName: 'Low Balance User',
    balance: 10,
    role: 'USER',
    trustScore: 100,
    totalBets: 10,
    totalWinnings: 50,
    winRate: 0.3,
    createdAt: '2024-01-01T00:00:00Z',
    updatedAt: '2024-01-15T00:00:00Z',
  },
  newUser: {
    id: 'user-new-1',
    email: 'new@test.com',
    displayName: 'New User',
    balance: 0,
    role: 'USER',
    trustScore: 100,
    totalBets: 0,
    totalWinnings: 0,
    winRate: 0,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  },
};

export const MockBets = {
  active: {
    id: 'bet-active-1',
    title: 'Lakers vs Warriors',
    description: 'Who will win the game tonight?',
    betAmount: 50,
    sideAName: 'Lakers',
    sideBName: 'Warriors',
    status: 'ACTIVE',
    creatorId: MockUsers.regular.id,
    participantCount: 2,
    expiresAt: new Date(Date.now() + 86400000).toISOString(),
    createdAt: new Date(Date.now() - 3600000).toISOString(),
    updatedAt: new Date(Date.now() - 3600000).toISOString(),
  },
  pendingResolution: {
    id: 'bet-pending-1',
    title: 'Super Bowl Winner',
    description: 'Who wins Super Bowl?',
    betAmount: 100,
    sideAName: 'Chiefs',
    sideBName: 'Eagles',
    status: 'PENDING_RESOLUTION',
    creatorId: MockUsers.regular.id,
    participantCount: 10,
    expiresAt: new Date(Date.now() - 3600000).toISOString(),
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    updatedAt: new Date(Date.now() - 3600000).toISOString(),
  },
  resolved: {
    id: 'bet-resolved-1',
    title: 'Past Bet',
    description: 'This bet is complete',
    betAmount: 25,
    sideAName: 'Yes',
    sideBName: 'No',
    status: 'RESOLVED',
    creatorId: MockUsers.regular.id,
    winningSide: 'A',
    participantCount: 4,
    expiresAt: new Date(Date.now() - 86400000).toISOString(),
    createdAt: new Date(Date.now() - 172800000).toISOString(),
    updatedAt: new Date(Date.now() - 86400000).toISOString(),
  },
  cancelled: {
    id: 'bet-cancelled-1',
    title: 'Cancelled Bet',
    description: 'This bet was cancelled',
    betAmount: 75,
    sideAName: 'Option A',
    sideBName: 'Option B',
    status: 'CANCELLED',
    creatorId: MockUsers.regular.id,
    participantCount: 0,
    expiresAt: new Date(Date.now() - 3600000).toISOString(),
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    updatedAt: new Date(Date.now() - 3600000).toISOString(),
  },
};

export const MockParticipants = {
  sideA: {
    id: 'participant-1',
    betId: MockBets.active.id,
    userId: MockUsers.regular.id,
    side: 'A',
    amount: 50,
    joinedAt: new Date(Date.now() - 1800000).toISOString(),
  },
  sideB: {
    id: 'participant-2',
    betId: MockBets.active.id,
    userId: 'user-other-1',
    side: 'B',
    amount: 50,
    joinedAt: new Date(Date.now() - 1200000).toISOString(),
  },
};

export const MockTransactions = {
  deposit: {
    id: 'transaction-deposit-1',
    userId: MockUsers.regular.id,
    type: 'DEPOSIT',
    status: 'COMPLETED',
    amount: 100,
    balanceBefore: 900,
    balanceAfter: 1000,
    paymentMethodId: 'payment-method-1',
    venmoTransactionId: 'venmo-12345',
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    completedAt: new Date(Date.now() - 86000000).toISOString(),
  },
  pendingDeposit: {
    id: 'transaction-pending-deposit-1',
    userId: MockUsers.regular.id,
    type: 'DEPOSIT',
    status: 'PENDING',
    amount: 200,
    balanceBefore: 1000,
    balanceAfter: 1000,
    paymentMethodId: 'payment-method-1',
    venmoTransactionId: 'venmo-67890',
    createdAt: new Date(Date.now() - 3600000).toISOString(),
  },
  withdrawal: {
    id: 'transaction-withdrawal-1',
    userId: MockUsers.regular.id,
    type: 'WITHDRAWAL',
    status: 'COMPLETED',
    amount: 50,
    balanceBefore: 1000,
    balanceAfter: 950,
    paymentMethodId: 'payment-method-1',
    venmoUsername: '@testuser',
    createdAt: new Date(Date.now() - 7200000).toISOString(),
    completedAt: new Date(Date.now() - 7000000).toISOString(),
  },
  betPlaced: {
    id: 'transaction-bet-1',
    userId: MockUsers.regular.id,
    type: 'BET_PLACED',
    status: 'COMPLETED',
    amount: 50,
    balanceBefore: 1000,
    balanceAfter: 950,
    relatedBetId: MockBets.active.id,
    relatedParticipantId: MockParticipants.sideA.id,
    createdAt: new Date(Date.now() - 1800000).toISOString(),
    completedAt: new Date(Date.now() - 1800000).toISOString(),
  },
  betWon: {
    id: 'transaction-won-1',
    userId: MockUsers.regular.id,
    type: 'BET_WON',
    status: 'COMPLETED',
    amount: 100,
    balanceBefore: 950,
    balanceAfter: 1050,
    relatedBetId: MockBets.resolved.id,
    createdAt: new Date(Date.now() - 86400000).toISOString(),
    completedAt: new Date(Date.now() - 86400000).toISOString(),
  },
};

export const MockPaymentMethods = {
  venmo: {
    id: 'payment-method-1',
    userId: MockUsers.regular.id,
    type: 'VENMO',
    venmoUsername: '@testuser',
    venmoEmail: 'test@example.com',
    isVerified: true,
    verifiedAt: new Date(Date.now() - 86400000).toISOString(),
    verificationMethod: 'MANUAL',
    isDefault: true,
    isActive: true,
    displayName: 'Venmo (@testuser)',
    createdAt: new Date(Date.now() - 172800000).toISOString(),
  },
  unverified: {
    id: 'payment-method-2',
    userId: MockUsers.regular.id,
    type: 'VENMO',
    venmoUsername: '@newvenmo',
    isVerified: false,
    isDefault: false,
    isActive: true,
    displayName: 'Venmo (@newvenmo)',
    createdAt: new Date(Date.now() - 3600000).toISOString(),
  },
};

export const MockNotifications = {
  betInvite: {
    id: 'notification-1',
    userId: MockUsers.regular.id,
    type: 'BET_INVITATION_RECEIVED',
    title: 'Bet Invitation',
    message: 'You have been invited to join a bet',
    isRead: false,
    priority: 'MEDIUM',
    relatedBetId: MockBets.active.id,
    relatedUserId: MockUsers.admin.id,
    createdAt: new Date(Date.now() - 1800000).toISOString(),
  },
  friendRequest: {
    id: 'notification-2',
    userId: MockUsers.regular.id,
    type: 'FRIEND_REQUEST_RECEIVED',
    title: 'Friend Request',
    message: 'Someone sent you a friend request',
    isRead: false,
    priority: 'LOW',
    relatedUserId: 'user-other-2',
    createdAt: new Date(Date.now() - 3600000).toISOString(),
  },
};

/**
 * Factory functions for creating custom mock data
 */
export const MockFactory = {
  user: (overrides?: Partial<any>) => ({
    ...MockUsers.regular,
    id: `user-${Math.random().toString(36).substring(7)}`,
    ...overrides,
  }),

  bet: (overrides?: Partial<any>) => ({
    ...MockBets.active,
    id: `bet-${Math.random().toString(36).substring(7)}`,
    ...overrides,
  }),

  transaction: (overrides?: Partial<any>) => ({
    ...MockTransactions.deposit,
    id: `transaction-${Math.random().toString(36).substring(7)}`,
    ...overrides,
  }),

  participant: (overrides?: Partial<any>) => ({
    ...MockParticipants.sideA,
    id: `participant-${Math.random().toString(36).substring(7)}`,
    ...overrides,
  }),
};
